{
        "1": {
          "title": "Random Module",
          "description": "This module focuses on working with pseudorandom sequences, which are essential in mathematical modeling, cryptography, and various games.",
          "tasks": {
            "task_1": {
              "title": "Introduction to random module",
              "description": "Этот модуль предназначен для работы с псевдослучайными последовательностями. Такие последовательности важны в математическом моделировании, в криптографии и в различных играх.",
              "content": {
                "overview": "Модуль 'random' предоставляет множество функций для генерации псевдослучайных чисел и последовательностей.",
                "structure": {
                  "example": ">>> import random\n>>> dir(random)\n['BPF', ... , 'choice', ... , 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'triangular', ...]"
                },
                "functions": {
                  "randint": {
                    "description": "Генерирует случайное целое число между заданными границами (включительно).",
                    "example": "from random import randint\nprint(randint(10, 20))"
                  },
                  "randrange": {
                    "description": "Генерирует случайное число из диапазона с опциональной возможностью задать шаг.",
                    "example": "from random import randrange\nprint(randrange(40, 100, 5))"
                  },
                  "choice": {
                    "description": "Выбирает случайный элемент из последовательности (список, кортеж, строка и т.д.).",
                    "examples": [
                      "from random import choice\nprint(choice(['heads', 'tails']))",
                      "from random import choice\nprint(choice([1, 2, 3]))",
                      "choice(\"ab\")"
                    ]
                  },
                  "dice_simulation": {
                    "description": "Симуляция бросков кубиков с использованием функции choice.",
                    "example": "from random import choice\n\n# Симуляция нескольких бросков кубиков\nfor i in range(1, 10):\n    print(choice([1, 2, 3, 4, 5, 6]), choice([1, 2, 3, 4, 5, 6]))"
                  },
                  "unicode_dice_simulation": {
                    "description": "Симуляция бросков игральных кубиков с символами Unicode.",
                    "example": "from random import choice\n\ndashes = ['\\u2680', '\\u2681', '\\u2682', '\\u2683', '\\u2684', '\\u2685']\nfor i in range(1, 10):\n    print(choice(dashes), choice(dashes))"
                  },
                  "magic_8_ball": {
                    "description": "Симуляция магического шара, отвечающего на вопросы 'да' или 'нет'.",
                    "example": "from random import choice\n\nchoices = [\n    'It is certain (Бесспорно)',\n    'It is decidedly so (Предрешено)',\n    'Without a doubt (Никаких сомнений)',\n    'Yes — definitely (Определённо да)',\n    'You may rely on it (Можешь быть уверен в этом)',\n    'As I see it, yes (Мне кажется — «да»)',\n    'Most likely (Вероятнее всего)',\n    'Outlook good (Хорошие перспективы)',\n    'Signs point to yes (Знаки говорят — «да»)',\n    'Yes (Да)',\n    'Reply hazy, try again (Пока не ясно, попробуй снова)',\n    'Ask again later (Спроси позже)',\n    'Better not tell you now (Лучше не рассказывать)',\n    'Cannot predict now (Сейчас нельзя предсказать)',\n    'Concentrate and ask again (Соберись и спроси опять)',\n    'Don’t count on it (Даже не думай)',\n    'My reply is no (Мой ответ — «нет»)',\n    'My sources say no (По моим данным — «нет»)',\n    'Outlook not so good (Перспективы не очень хорошие)',\n    'Very doubtful (Весьма сомнительно)'\n]\n\nfor i in range(5):\n    input('Ваш вопрос: ')\n    print(choice(choices))"
                  },
                  "choices": {
                    "description": "Выбор нескольких случайных элементов с возможностью повторений.",
                    "example": "from random import choices\nprint(choices(['Yes', 'No', 'Maybe'], k=5))"
                  },
                  "sample": {
                    "description": "Возвращает несколько случайных элементов без повторений.",
                    "example": "from random import sample\nprint(sample(range(10), 6))"
                  },
                  "shuffle": {
                    "description": "Перемешивает список на месте.",
                    "example": "from random import shuffle\na = list(range(100))\nshuffle(a)\nprint(a[:10])"
                  },
                  "random": {
                    "description": "Генерирует случайное вещественное число в диапазоне от 0 до 1 (не включительно).",
                    "example": "from random import random as rnd\nprint(rnd())"
                  }

                }
              }
    },
            "task_2": {
                    "title": "Random type of application",
                    "description": "Write a program to create a list of types of applications and output random choice.",
                    "explanation": {
                        "beginner": {
                            "title": "Easy Peasy Explanation",
                            "content": [
                                {
                                    "tag": "concept",
                                    "text": "In this task, we want to pick a number from a small group of numbers."
                                },
                                {
                                    "tag": "analogy",
                                    "text": "Imagine you have a box with the numbers <strong>11</strong> to <strong>20</strong> inside it."
                                },
                                {
                                    "tag": "action",
                                    "text": "We want to randomly pick one number from this box! This means we don’t know which number we will get each time we pick."
                                },
                                {
                                    "tag": "example",
                                    "text": "For example, if we reach into the box and pull out a <strong>15</strong>, that’s our random number!"
                                },
                                {
                                    "tag": "tool",
                                    "text": "To do this in a program, we can use a special tool called '<code>random</code>' that helps us choose a number without looking."
                                }
                            ]
                        },
                        "intermediate": {
                            "title": "A Little More Detail",
                            "content": [
                                {
                                    "tag": "goal",
                                    "text": "This task requires us to generate a random integer between <strong>11</strong> and <strong>20</strong>."
                                },
                                {
                                    "tag": "library",
                                    "text": "In programming, we can use a library called '<code>random</code>' to help us achieve this."
                                },
                                {
                                    "tag": "functionality",
                                    "text": "When we call a specific function from this library, it will return a number from our specified range."
                                },
                                {
                                    "tag": "note",
                                    "text": "It’s important to note that each time we run the program, we may get a different number."
                                },
                                {
                                    "tag": "example",
                                    "text": "For example, one time it might be <strong>12</strong>, and the next it could be <strong>18</strong>."
                                },
                                {
                                    "tag": "application",
                                    "text": "This randomness is useful in games and simulations."
                                }
                            ]
                        },
                        "advanced": {
                            "title": "Let's Dive Deeper!",
                            "content": [
                                {
                                    "tag": "goal",
                                    "text": "The goal is to output a random integer in the range <strong>[11, 20]</strong>."
                                },
                                {
                                    "tag": "library",
                                    "text": "We utilize the '<code>random</code>' library in Python, specifically the '<code>randint</code>' function, which takes two arguments: the lower and upper bounds of the range."
                                },
                                {
                                    "tag": "note",
                                    "text": "Each execution yields a potentially different result, making it ideal for applications requiring unpredictability."
                                }
                            ]
                        }
            },
            "solution": {
        "code": "import random\n\nrandom_number = random.randint(11, 20)\nprint(random_number)",
        "steps": [
            {
                "step_1": {
      "code_line": "import random",
      "description": "This line imports the 'random' module, which contains functions to generate random numbers. It is like opening a toolbox that has tools for randomness."
    },
    "step_2": {
      "code_line": "random_number = random.randint(11, 20)",
      "description": {
        "random.randint(11, 20)": "This function picks a random number between 11 and 20, including both 11 and 20. It's like rolling a dice with numbers 11 to 20.",
        "random_number": "This variable stores the randomly picked number, like putting the chosen number in a box."
      }
    },
    "step_3": {
      "code_line": "print(random_number)",
      "description": "This prints the value stored in 'random_number' to the screen, showing which number was picked."
    },
    "summary": "The code picks a random number between 11 and 20 using the 'random' module and prints it out."
}
        ]
    },
     "explanation_of_code": "This section explains how the code works step by step."
        },
            "task_3": {
                "title": "Shuffle",
                "description": "Write a program to shuffle numbers between 0 and 10 (not inclusive).\n\nSample Output:\n[5 7 9 0 2 3 1 6 8 4]"
            },
            "task_4": {
                "title": "Sportloto",
                "description": "Write a program to implement 'Sportloto' 5 from 36. Output five random numbers in ascending order."
            },
            "task_5": {
                "title": "Heads or tails",
                "description": "Write a program that simulates tossing coins. The number of attempts is entered from the keyboard. The program should display the results of the rolls: heads or tails."
            }
        }
        },
      
  
    "2": {
        "title": "PIL Library (Pillow)",
        "tasks": {
            "1": {
                "title": "PIL Library (Pillow)",
                "description": "Understand the PIL library."
            }
        }
    },
    "3": {
        "title": "Wave Library",
        "tasks": {
            "1": {
                "title": "Wave Library",
                "description": "Learn about the wave library."
            }
        }
    },
    "4": {
        "title": "PyGame. Draw Module",
        "tasks": {
            "1": {
                "title": "PyGame. Draw Module",
                "description": "Learn about PyGame draw module."
            }
        }
    },
    "5": {
        "title": "PyGame. Surfaces. Animation and Time",
        "tasks": {
            "1": {
                "title": "PyGame. Surfaces. Animation and Time",
                "description": "Understand PyGame surfaces, animation, and time."
            }
        }
    },
    "6": {
        "title": "PyGame. Mouse Events",
        "tasks": {
            "1": {
                "title": "PyGame. Mouse Events",
                "description": "Learn about PyGame mouse events."
            }
        }
    },
    "7": {
        "title": "PyGame. Keyboard Events",
        "tasks": {
            "1": {
                "title": "PyGame. Keyboard Events",
                "description": "Learn about PyGame keyboard events."
            }
        }
    },
    "8": {
        "title": "PyGame. Output Text. Game Counter",
        "tasks": {
            "1": {
                "title": "PyGame. Output Text. Game Counter",
                "description": "Understand PyGame output text and game counter."
            }
        }
    },
    "9": {
        "title": "PyGame. Load and Control Images",
        "tasks": {
            "1": {
                "title": "PyGame. Load and Control Images",
                "description": "Learn about PyGame image loading and control."
            }
        }
    },
    "10": {
        "title": "PyGame. Object Collisions",
        "tasks": {
            "1": {
                "title": "PyGame. Object Collisions",
                "description": "Understand PyGame object collisions."
            }
        }
    }
}
